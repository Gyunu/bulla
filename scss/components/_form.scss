@mixin input {
  @include control;
  @include has-colored-bg('white');
  @include has-border('tiny', 'grey', 'every');
  @include has-colored-text('black');

  &:hover,
  &.is-hovered {
    @include has-border('tiny', 'black', 'every');
  }

  &:focus,
  &.is-focused,
  &:active,
  &.is-active {
    @include has-border('tiny', 'primary', 'every');
  }

  &[disabled] {
    @include has-colored-bg('grey');
    @include has-border('tiny', 'grey', 'every');
    @include has-colored-text('grey');
    box-shadow: none;

    @include placeholder {
      color: rgba(map-get($colors, 'black'), 0.3);
    }
  }
}

.input,
.textarea {
  @include input;

  box-shadow: inset 0 1px 2px rgba($black, 0.1);
  max-width: 100%;
  width: 100%;

  &[type="search"] {
    @include has-rounded-corners('huge');
    @include has-padding('small', 'left');
  }

  // Colors
  @each $name, $color in $colors {

    &.is-#{$name} {
      @include has-border('tiny', $name, 'every');
    }
  }

  // Sizes
  &.is-small {
    @include control-small;
  }

  &.is-medium {
    @include control-medium;
  }

  &.is-large {
    @include control-large;
  }

  &.is-inline {
    display: inline;
    width: auto;
  }
}

.textarea {
  display: block;
  max-height: 600px;
  max-width: 100%;
  min-height: 120px;
  min-width: 100%;
  resize: vertical;
}

.checkbox,
.radio {
  align-items: center;
  cursor: pointer;
  display: inline-flex;
  flex-wrap: wrap;
  justify-content: flex-start;
  line-height: 1.5;
  position: relative;
  vertical-align: top;

  input {
    cursor: pointer;
    margin-right: 0.5em;
  }

  &:hover {
    @include has-colored-text('grey');
  }

  &[disabled] {
    @include has-colored-text('grey');
    cursor: not-allowed;
  }
}

.radio {
  & + .radio {
    margin-left: 0.5em;
  }
}

.select {
  display: inline-block;
  height: 2.25em;
  position: relative;
  vertical-align: top;

  &:after {
    @include arrow(map-get($colors, 'primary'));

    margin-top: -0.375em;
    right: 1.125em;
    top: 50%;
    z-index: 4;
  }

  select {
    @include input;

    cursor: pointer;
    display: block;
    font-size: 1em;
    outline: none;
    padding-right: 2.5em;

    &:hover {
      @include has-border('tiny', 'grey', 'every');
    }

    &::-ms-expand {
      display: none;
    }
  }

  // States
  &:hover {
    &:after {
      @include has-border('tiny', 'grey', 'every');
    }
  }

  // Colors
  @each $name, $color in $colors {

    &.is-#{$name} select {
      @include has-border('tiny', $name, 'every');
    }
  }

  // Sizes
  &.is-small {
    @include control-small;
  }

  &.is-medium {
    @include control-medium;
  }

  &.is-large {
    @include control-large;
  }

  // Modifiers
  &.is-fullwidth {
    width: 100%;

    select {
      width: 100%;
    }
  }
}

.label {
  @include has-colored-text('black');
  margin: 0;
  display: block;
  font-weight: 700;

}

.help {
  @include has-sized-text('small');
  @include has-margin('tiny', 'top');
  display: block;

  @each $name in $colors {
    &.is-#{$name} {
      @include has-colored-text($name);
    }
  }
}

.select select {
  line-height: 1;
}

// Containers

.field {
  &:not(:last-child) {
    margin-bottom: 0.75rem;
  }

  // Modifiers
  &.has-addons {
    display: flex;
    justify-content: flex-start;

    .control {
      margin-right: -1px;

      &:first-child {
        .button,
        .input,
        .select select {
          border-bottom-left-radius: map-get($sizes, 'tiny');
          border-top-left-radius: map-get($sizes, 'tiny');
        }
      }

      &:last-child {
        .button,
        .input,
        .select select {
          border-bottom-right-radius: map-get($sizes, 'tiny');
          border-top-right-radius: map-get($sizes, 'tiny');
        }
      }

      .button,
      .input,
      .select select {
        border-radius: 0;

        &:hover,
        &.is-hovered {
          z-index: 2;
        }

        &:focus,
        &.is-focused,
        &:active,
        &.is-active {
          z-index: 3;

          &:hover {
            z-index: 4;
          }
        }
      }

      &.is-expanded {
        flex-grow: 1;
        flex-shrink: 0;
      }
    }

    &.has-addons-centered {
      justify-content: center;
    }

    &.has-addons-right {
      justify-content: flex-end;
    }

    &.has-addons-fullwidth {
      .control {
        flex-grow: 1;
        flex-shrink: 0;
      }
    }
  }

  &.is-grouped {
    display: flex;
    justify-content: flex-start;

    & > .control {
      flex-basis: 0;
      flex-shrink: 0;

      &:not(:last-child) {
        margin-bottom: 0;
        margin-right: 0.75rem;
      }

      &.is-expanded {
        flex-grow: 1;
        flex-shrink: 1;
      }
    }

    &.is-grouped-centered {
      justify-content: center;
    }

    &.is-grouped-right {
      justify-content: flex-end;
    }
  }

  &.is-horizontal {
    @include tablet {
      display: flex;
    }
  }
}

.field-label {
  .label {
    font-size: inherit;
  }

  @include mobile {
    margin-bottom: 0.5rem;
  }


  @include tablet {
    flex-basis: 0;
    flex-grow: 1;
    flex-shrink: 0;
    margin-right: 1.5rem;
    text-align: right;

    &.is-small {
      font-size: $size-small;
      padding-top: 0.375em;
    }

    &.is-normal {
      padding-top: 0.375em;
    }

    &.is-medium {
      font-size: $size-medium;
      padding-top: 0.375em;
    }

    &.is-large {
      font-size: $size-large;
      padding-top: 0.375em;
    }
  }
}

.field-body {
  @include tablet {
    display: flex;
    flex-basis: 0;
    flex-grow: 5;
    flex-shrink: 1;

    .field {
      flex-shrink: 1;

      &:not(.is-narrow) {
        flex-grow: 1;
      }

      &:not(:last-child) {
        margin-bottom: 0;
        margin-right: 0.75rem;
      }
    }
  }
}

.control {
  font-size: $size-normal;
  position: relative;
  text-align: left;

  // Modifiers
  &.has-icon {
    .icon {
      @include has-colored-text('grey');
      height: 2.25em;
      pointer-events: none;
      position: absolute;
      top: 0;
      width: 2.25em;
      z-index: 4;
    }

    .input {
      &:focus {
        & + .icon {
          @include has-colored-text('grey');
        }
      }

      &.is-small {
        & + .icon {
          @include has-sized-text('small');
        }
      }

      &.is-medium {
        & + .icon {
          @include has-sized-text('medium');
        }
      }

      &.is-large {
        & + .icon {
          @include has-sized-text('large');
        }
      }
    }

    &:not(.has-icon-right) {
      .icon {
        left: 0;
      }

      .input {
        padding-left: 2.25em;
      }
    }

    &.has-icon-right {
      .icon {
        right: 0;
      }

      .input {
        padding-right: 2.25em;
      }
    }
  }

  &.is-loading {
    &:after {
      @include loader;

      position: absolute !important;
      right: 0.625em;
      top: 0.625em;
    }
  }
}
