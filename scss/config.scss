////
/// This is the sass config variables file.
/// It contains all the sass variables used throughout the partials
/// @author David Allen
/// @since v1.0.0
////





// Fonts

/// This is a map of all fonts used in the website
/// It's used in a variety of mixins to generate classes for fonts
/// Access properties where needed with map-get($fonts, 'property')
$fonts: (
  'light': '',
  'regular': ''
);


// Sizes

/// This is the baseline size used to base other measurements on.
/// For things like margings, padding and font size.
$baseline: 1rem;


// Colors
$basecolor: #19C4FF;
/// This is a map of all colors used in the website
/// It's used in a variety of mixins to generate classes for text color, background color and border color
/// Access properties where needed with map-get($colors, 'property')
$colors: (
  'white': #fff,
  'black': #333,
  'grey': #ccc,
  'orange': hsl(14, 100%, 53%),
  'yellow': hsl(48, 100%, 67%),
  'green': hsl(141, 71%, 48%),
  'turquoise': hsl(171, 100%, 41%),
  'blue': hsl(217, 71%, 53%),
  'purple': hsl(271, 100%, 71%),
  'red': hsl(348, 100%, 61%)
);



// Sizing and Positioning

/// This is a map of all sizes used in the utility css selectors
/// It's used in the m() and p() mixins to generate the required property sizes, based on the basline variable
/// It's also used to generate utility css selectors like .m-u-m (medium, universal margin).
/// Access properties where needed with map-get($sizes, 'property')
$sizes: (
  'none': $baseline * 0,
  'micro': $baseline * .2,
  'mini': $baseline * .4,
  'small':	$baseline * .6,
  'medium': $baseline,
  'large': $baseline * 1.3,
  'great': $baseline * 2,
  'grand': $baseline * 3,
  'huge': $baseline * 5,
);


/// This is a map of all positions used in the utility css selectors
/// It's used in the m() and p() mixins to generate the required property positions
/// Access properties where needed with map-get($positions, 'property')
$positions: (
  'top': 'top',
  'bottom': 'bottom',
  'left': 'left',
  'right': 'right',
  'all': (
    '1': 'top',
    '2': 'bottom',
    '3': 'left',
    '4': 'right'
  ),
  'horz': (
    '1': 'left',
    '2': 'right'
  ),
  'vert': (
    '1': 'top',
    '2': 'bottom'
  ),
  'none': 'none'
);

//media queries - http://mydevice.io/devices/
$media: (
  'xs': 0, //320px - smallest device screen size
  's': 37.5em, //600px, - smallest tablet screen size
  'm': 75em, //1200px
  'l': 100em, //1600px
  'xl': 130em
);

$display: (
  'i': 'inline',
  'ib': 'inline-block',
  'if': 'inline-flex',
  'b': 'block',
  'f': 'flex',
  't': 'table',
  'l': 'list-item',
  'r': 'run-in',
  'tc': 'table-cell',
  'n': 'none',
  'ih': 'inherit',
  'in': 'initial'
);

$shades: (
  'normal': 0,
  'dark': 5%,
  'darker': 10%,
  'darkest': 15%
);

/// This is the amount of columns defined for the grid system
$columns: 12;
/// The width of each column in %
$column-width: 100 / $columns;

//layers - z-index
$layers: 10;
